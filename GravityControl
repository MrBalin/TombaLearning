using UnityEngine;

[RequireComponent(typeof(CapsuleCollider))]
[RequireComponent(typeof(Rigidbody))]
public class GravityControl : MonoBehaviour
{
    Manager_PlayerMovement myManager;
    Rigidbody myRigidbody;
    CapsuleCollider myCollider;

    [Header("Jump Settings")]
    public float JumpPower = 12;
    private bool jumpedPrimary;

    public bool JumpedPrimary
    {
        get { return jumpedPrimary; }
        set { jumpedPrimary = value; }
    }





    [Header("Ground Control")]
    [Range(0.1f, 4f)][SerializeField] float gravityMultiplier = 2f;
    public float GravityMultiplier
    {
        get { return gravityMultiplier; }
    }
    [Range(0f, 100f)]
    [SerializeField] float dragMultiplier = 5f;
    [SerializeField] float slopeLimit = 50;
    public float SlopeLimit
    {
        get { return slopeLimit; }
    }
    [SerializeField] float GroundCheckDistance = 0.2f;
    [SerializeField] LayerMask Ground;
    bool isGrounded;
    public bool IsGrounded
    {
        get { return isGrounded; }
    }
    bool previouslyGrounded;
    float movingPlatform_Timer;
    Transform movingPlatform;
    Vector3 groundNormal;
    public Vector3 GroundNormal
    {
        get { return groundNormal; }
    }


    private void Awake()
    {
        myManager = GetComponent<Manager_PlayerMovement>();
        myRigidbody = GetComponent<Rigidbody>();
        //myRigidbody.constraints = RigidbodyConstraints.FreezeRotation;
        myRigidbody.useGravity = false;

        myCollider = GetComponent<CapsuleCollider>();


        jumpedPrimary = false;



    }

    void Update()
    {
        //if (input_Jump == 0 && jumpedPrimary) jumpedPrimary = false;
        
        if (myManager.MyInputs.CurrentPlayer.GetButtonDown(myManager.MyInputs.Jump) && jumpedPrimary) jumpedPrimary = false;
       
        //IfOn_MovingPlatform_Stay();
    }

    private void FixedUpdate()
    {
        CheckStatus_Ground();
        myRigidbody.drag = isGrounded ? dragMultiplier : 0;
    }


    public void AddGravity()
    {
        myRigidbody.AddForce(groundNormal * Physics.gravity.y * gravityMultiplier * Time.deltaTime, ForceMode.VelocityChange);
    }

    public void ZeroOutVelicity()
    {
        myRigidbody.velocity = Vector3.zero;
    }

    public void DoJump()
    {
        myRigidbody.AddForce(Vector3.up * JumpPower, ForceMode.Impulse);
        jumpedPrimary = true;
    }


    #region GroundCheck
    void CheckStatus_Ground()
    {
        RaycastHit hitInfo;
        Vector3 _origin = transform.position + myCollider.center;
        float _distanceDown = myCollider.center.y + GroundCheckDistance;

        //If detect ground
        if (Physics.Raycast(_origin, Vector3.down, out hitInfo, _distanceDown, Ground))
        {
            if (hitInfo.collider.isTrigger) return;
            //Debug.Log(Vector3.Angle(Vector3.up, hitInfo.normal));

            //If ground not too steep
            if (Vector3.Angle(Vector3.up, hitInfo.normal) < slopeLimit)
            {
                groundNormal = hitInfo.normal;
                isGrounded = true;
                if (!previouslyGrounded)
                {
                    myRigidbody.velocity = new Vector3(myRigidbody.velocity.x, 0, myRigidbody.velocity.z);
                    previouslyGrounded = true;
                }


                if (hitInfo.transform.tag == "MovingPlatform")
                {
                    //Debug.Log("on MovingPlatform");
                    movingPlatform = hitInfo.transform;
                    movingPlatform_Timer = 0.2f;
                    //Breathing room to not slide around
                }

            }
            else
            {
                //If ground too steep
                previouslyGrounded = false;
                isGrounded = false;
                groundNormal = Vector3.up;
            }
        }
        else
        {
            //did not detect ground
            previouslyGrounded = false;
            isGrounded = false;
            groundNormal = Vector3.up;
        }

        //Debug.Log("IsGrounded: " + isGrounded);
    }

    public void IfOn_MovingPlatform_Stay()
    {
        if (movingPlatform && movingPlatform_Timer > 0)
            transform.parent = movingPlatform;

        movingPlatform_Timer -= Time.deltaTime;

        if (movingPlatform_Timer <= 0)
        {
            transform.parent = null;
            movingPlatform = null;
        }
    }
    #endregion


}
