//Honestly, would recommend buying/creating a different Spline Package.
//https://assetstore.unity.com/packages/tools/utilities/dreamteck-splines-61926
using Dreamteck.Splines;

using UnityEngine;

//Unity Free Package
using Cinemachine;


[RequireComponent(typeof(BoxCollider))]
public class Spline_Junction : MonoBehaviour
{


    //group below into subclass: Spline & Camera?
    [SerializeField] SplineComputer Spline_A;
    [SerializeField] SplineComputer Spline_B;

    [SerializeField] CinemachineVirtualCamera Camera_A;
    [SerializeField] CinemachineVirtualCamera Camera_B;

    [SerializeField] Transform my3DUI;


    BoxCollider myCollider;
    bool didChange;

    Manager_PlayerMovement playerManager;



    public float timeRemaining = 1;
    float timer;

    private void Awake()
    {
        myCollider = GetComponent<BoxCollider>();
        myCollider.isTrigger = true;

        my3DUI.gameObject.SetActive(false);
        didChange = false;
        timer = timeRemaining;
    }

    private void Update()
    {
        if (playerManager != null && !didChange)
        {

            if (playerManager.MySpline_Navigator.AtStartofSpline)
            {
                if (timer > 0)
                {
                    timer -= Time.deltaTime;
                }
                else
                {

                    if (playerManager.MySpline_Navigator != null) AssignSpline(playerManager.MySpline_Navigator);
                    didChange = true;
                }
            }

            if (playerManager.MySpline_Navigator.AtEndofSpline)
            {
                if (timer > 0)
                {
                    timer -= Time.deltaTime;
                }
                else
                {

                    if (playerManager.MySpline_Navigator != null) AssignSpline(playerManager.MySpline_Navigator);
                    didChange = true;
                }
            }
            

            if(!playerManager.MySpline_Navigator.AtStartofSpline && !playerManager.MySpline_Navigator.AtEndofSpline)
            {
                if (playerManager.MyInputs.CurrentPlayer.GetAxis(playerManager.MyInputs.Move_V) > 0)
                {
                    if (timer > 0)
                    {
                        timer -= Time.deltaTime;
                    }
                    else
                    {

                        if (playerManager.MySpline_Navigator != null) AssignSpline(playerManager.MySpline_Navigator);
                        didChange = true;
                    }
                }
                if (playerManager.MyInputs.CurrentPlayer.GetAxis(playerManager.MyInputs.Move_V) <= 0)
                {
                    timer = timeRemaining;
                }
            }

          
            //Debug.Log("timer: " + timer);
        }
    }

    private void OnTriggerStay(Collider other)
    {
        if(other.tag == "Player")
        {
            my3DUI.gameObject.SetActive(true);
            playerManager = other.GetComponent<Manager_PlayerMovement>();
        }
    }

    private void OnTriggerExit(Collider other)
    {
        if(other.tag == "Player")
        {
            my3DUI.gameObject.SetActive(false);
            didChange = false;
            timer = timeRemaining;
            playerManager = null;

        }
    }

    public void AssignSpline(Spline_Navigator _splineNavigator)
    {
        if (_splineNavigator.MyProjector.spline == Spline_A)
        {
            _splineNavigator.MyProjector.spline = Spline_B;
            _splineNavigator.CurrentSpline = Spline_B;
            //Debug.Log("Assigned to: Spline B");

            Camera_B.Priority = 1;
            Camera_A.Priority = 0;

            timer = timeRemaining;
            return;
        }

        if (_splineNavigator.MyProjector.spline == Spline_B)
        {
            _splineNavigator.MyProjector.spline = Spline_A;
            _splineNavigator.CurrentSpline = Spline_A;

            Camera_A.Priority = 1;
            Camera_B.Priority = 0;


            //Debug.Log("Assigned to: Spline A");
            timer = timeRemaining;
            return;
        }
    }
}

